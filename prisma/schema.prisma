generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "mysql"
  url       = "prisma://accelerate.prisma-data.net/?api_key=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhcGlfa2V5IjoiNjlmMzc0M2QtMDdhMy00NzA3LWI2YTQtYzllZTk3MzIxMjY2IiwidGVuYW50X2lkIjoiOTcxZTRmMTkxZDAxNmY1ZTU4NDFmOWY5N2E3ZTc3OWQwZmQ3NGFhNjVmOWM0NzMxY2NmMGEyZDhlMzc1MjBjYiIsImludGVybmFsX3NlY3JldCI6IjE3ZTJmZTIyLTI3NzItNGYyMi05ZGMzLTA0ODZjM2NhZWY3MSJ9.LALqRKr76LtCOS6_FK6yf91Cr4bwf0GA18Bg-JLLato"
  directUrl = "mysql://admin:gQK6YoNsBL8U11QMWkrP@cmj-main-database.cw1sl1nanwvx.eu-north-1.rds.amazonaws.com:3306/coinmarketjob"
}

model User {
  id             Int             @id @default(autoincrement())
  email          String          @unique
  hashedPassword String
  createdAt      DateTime        @default(now())
  updatedAt      DateTime?
  emailVerified  DateTime?
  jobs           Job[]
  savedJobs      SavedJobs[]
  appliedJobs    AppliedJobs[]
  jobAlerts      JobAlerts[]
  profile        Profile?
  companyProfile CompanyProfile?
  buyedPackages  BuyedPackage[]
  Settings       Settings[]

  JobQuestions JobQuestions[]

  applicationsState ApplicationsState[]

  Answers Answers[]
}

model Job {
  id                Int               @id @default(autoincrement())
  userId            Int?
  user              User?             @relation(fields: [userId], references: [id], onDelete: Cascade)
  logo              String?
  companyName       String?
  jobTitle          String
  location          String?
  locationType      LocationType?
  jobType           JobType?
  experienceLevel   ExperienceLevel?
  educationalDegree EducationalDegree?
  salaryMin         Int?
  salaryMax         Int?
  salaryShow        Boolean?
  salaryUnit        SalaryUnit?
  jobDescription    Json?
  date              DateTime          @default(now())
  savedJobs         SavedJobs[]
  appliedJobs       AppliedJobs[]
  jobQuestions      JobQuestions[]

  applicationsState ApplicationsState[]
}

enum SalaryUnit {
  Year
  Month
  Week
  Day
  Hour
}

model JobQuestions {
  id       Int    @id @default(autoincrement())
  userId   Int?
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId    Int
  job      Job    @relation(fields: [jobId], references: [id], onDelete: Cascade)
  question String

  Answers Answers[]
}

enum LocationType {
  Remote
  Hybrid
  Office
}

enum JobType {
  Internship
  PartTime
  FullTime
  Contract
  Temporary
  Other
}

enum ExperienceLevel {
  EntryLevel
  Junior
  MidLevel
  Senior
  Lead
  Manager
  Executive
}

enum EducationalDegree {
  HighSchool
  University
  Master
  PhD
}

model SavedJobs {
  id     Int      @id @default(autoincrement())
  userId Int
  user   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId  Int
  job    Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  date   DateTime @default(now())

  @@unique([userId, jobId])
}

model AppliedJobs {
  id               Int      @id @default(autoincrement())
  userId           Int?
  user             User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobId            Int
  job              Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
  name             String?
  surname          String?
  email            String?
  phoneCode        String?
  phone            String?
  date             DateTime @default(now())
  resumeLink       String?
  resumeDraft      Json?

  applicationsState ApplicationsState[]

  @@unique([userId, jobId])
  Answers Answers[]
}

model JobTitles {
  id       Int    @id @default(autoincrement())
  jobTitle String
}

model Cities {
  id      Int     @id @default(autoincrement())
  name    String  @unique
  country String?
  admin1  String?
  lat     Float?
  lon     Float?
  pop     Int?
}


model JobAlerts {
  id                 Int      @id @default(autoincrement())
  userId             Int
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobTypes           String
  experienceLevels   String
  educationalDegrees String
  visaSponsorship    Boolean
  salaryMin          Int
  salaryMax          Int
  location           String
  date               DateTime
}

model Profile {
  id            Int              @id @default(autoincrement())
  userId        Int              @unique
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  logoURL       String?
  nameSurname   String?
  headline      String?
  phoneCode     String?
  phone         String?
  about         Json?
  sectionsOrder String?
  socialMedias  SocialMedia[]
  section       ProfileSection[]
}

model CompanyProfile {
  id           Int                  @id @default(autoincrement())
  userId       Int                  @unique
  user         User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  logoURL      String
  companyName  String
  headline     String
  siteUrl      String
  about        Json?
  socialMedias SocialMediaCompany[]
}

model SocialMedia {
  id              Int             @id @default(autoincrement())
  profileId       Int
  profile         Profile         @relation(fields: [profileId], references: [id], onDelete: Cascade)
  socialMediaType socialMediaType
  socialMediaUrl  String
  platformName    String?
  username        String?
}

model SocialMediaCompany {
  id              Int             @id @default(autoincrement())
  profileId       Int
  profile         CompanyProfile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  socialMediaType socialMediaType
  socialMediaUrl  String
  platformName    String?
  username        String?
}

enum socialMediaType {
  Arena
  Facebook
  Figma
  Github
  Gitlab
  Instagram
  Linkedin
  Substack
  Telegram
  Tiktok
  X
  Youtube
  Custom
}

model ProfileSection {
  id          Int           @id @default(autoincrement())
  profileId   Int
  profile     Profile       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  sectionType SectionType
  title       String?
  from        String?
  to          String?
  url         String?
  institution String?
  location    String?
  description Json?
  attachments Attachments[]
}

enum SectionType {
  WorkExperience
  Volunteering
  Education
  Certifications
  Projects
  Publications
  Awards
}

model Attachments {
  id            Int            @id @default(autoincrement())
  sectionId     Int
  section       ProfileSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  attachmentUrl String
  attachmentType AttachmentType
}

enum AttachmentType {
  Image
  File
}

model BuyedPackage {
  id               Int         @id @default(autoincrement())
  userId           Int
  user             User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageType      PackageType
  subscriptionDate DateTime    @default(now())
  expirationDate   DateTime?
}

enum PackageType {
  OneJob
  FiveJob
  Monthly
}


model Live {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(300)
  liveType     LiveType
  organisation String
  headline     String
  content      String   @db.VarChar(300)
  author       String?
  date         DateTime?
  location     String?
  prizePool    String?
  participants Int?
  url          String?
}

enum LiveType {
  News
  HACKHATHONS
  BLOG
}

model Settings {
  id         Int       @id @default(autoincrement())
  userId     Int       @unique
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme      Theme
  jobAlert   Boolean
  shouldKnow Boolean
  updates    Boolean
  frequency  Frequency
}

enum Theme {
  Light
  Dark
  System
}

enum Frequency {
  AlmostNothing
  Monthly
  Weekly
  Daily
  PrettyMuchEverything
}

model ApplicationsState {
  id            Int         @id @default(autoincrement())
  jobId         Int
  job           Job         @relation(fields: [jobId], references: [id], onDelete: Cascade)
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  applicationId Int
  appliedJobs   AppliedJobs @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  state State

  @@unique([userId, applicationId])
}

enum State {
  Approved
  Saved
  Declined
}

model Answers{
  id            Int         @id @default(autoincrement())
  userId        Int
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  applicationId Int
  appliedJobs   AppliedJobs @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  questionId    Int
  question      JobQuestions @relation(fields: [questionId], references: [id], onDelete: Cascade)
  answer        String
}

model WaitListUsers {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  referenceMail String?
}